import React from "react";
import { View, Text, Button, StyleSheet } from "react-native";
import { NativeStackScreenProps } from "@react-navigation/native-stack";
import { NivelXUsuario } from '@/assets/database/type'; // Import NivelXUsuario type

// IMPORTANT: Ensure this type matches your database/type.ts definition
// If 'id' is generated by IndexedDB, it should be optional here and number type.
// If your type definition is in a separate file, make sure it's consistent.
// type NivelXUsuario = {
//   id?: number; // Optional IndexedDB primary key
//   puntaje: number;
//   tiempo: number;
//   palabra: string | null;
//   intento: number;
//   recompensa_intento: string;
//   IdUsuario: number;
//   IdNivel: number;
// };


export type RootStackParamList = {
  Index: undefined;
  Login: undefined;
  Register: undefined;
  Home: undefined;
  Shop: undefined;
  Game: {
    nivel: NivelXUsuario; // Expects the full NivelXUsuario object
    onResultado?: (nivelActualizado: NivelXUsuario | null) => void; // Optional callback
  };
};

type Props = NativeStackScreenProps<RootStackParamList, 'Game'>;

export default function Game({ route, navigation }: Props) {
  // Destructure onResultado with a default empty function in case it's not passed
  const { nivel, onResultado = () => {} } = route.params;

  const completarNivel = () => {
    // Create a new object to avoid direct mutation, ensuring 'id' is carried over
    const nivelActualizado: NivelXUsuario = {
      ...nivel,
      puntaje: 100, // Simulate a score
      tiempo: 45,   // Simulate time
    };
    console.log('Game: Completar Nivel - Calling onResultado with:', nivelActualizado);
    onResultado(nivelActualizado); // Pass the updated level object back to Home
    navigation.goBack();
  };

  const noCompletarNivel = () => {
    const nivelActualizado: NivelXUsuario = {
      ...nivel,
      puntaje: 0,
      tiempo: 9999, // High time for "not completed"
    };
    console.log('Game: No Completar Nivel - Calling onResultado with:', nivelActualizado);
    onResultado(nivelActualizado); // Pass the updated level object back to Home
    navigation.goBack();
  };

  const volver = () => {
    console.log('Game: Volver sin cambios - Calling onResultado with null');
    onResultado(null); // Indicate no changes or user aborted
    navigation.goBack();
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Resultado de Nivel</Text>
      <Text style={styles.infoText}>Nivel ID: {nivel.IdNivel}</Text>
      <Text style={styles.infoText}>Puntaje Inicial: {nivel.puntaje}</Text>
      <Text style={styles.infoText}>Tiempo Inicial: {nivel.tiempo}</Text>
      {/* If nivel.id is null, it means it's a new level not yet in DB */}
      <Text style={styles.infoText}>IndexedDB ID: {nivel.id === null ? 'N/A (Nuevo)' : nivel.id}</Text>
      <Button title="Completar Nivel" onPress={completarNivel} />
      <Button title="No Completar Nivel" onPress={noCompletarNivel} />
      <Button title="Volver sin cambios" onPress={volver} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    gap: 10,
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#1a1a1a',
  },
  title: {
    fontSize: 24, // Slightly larger title
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
    color: '#fff',
  },
  infoText: {
    fontSize: 16,
    color: '#ccc',
    marginBottom: 5,
  },
  button: {
    marginTop: 10, // Add some space between buttons
  }
});